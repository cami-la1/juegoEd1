//---------------------------------------------------------------------------
// jugador.cpp

#pragma hdrstop

#include "jugador.h"
#include <Vcl.h>     // Necesario para los códigos de teclas como VK_UP
#include <stdlib.h>  // Necesario para rand() para la fruta

//---------------------------------------------------------------------------
#pragma package(smart_init)

// --- Constructor ---
// Guarda los punteros a las estructuras de datos y inicializa las coordenadas.
ControlJuego::ControlJuego(MatrizDispersa* m, ColaPri* c, pilaM* p) {
    this->mapa = m;
    this->cola_de_turnos = c;
    this->pila_undo = p;
    // Se inicializan en -1 para saber que aún no las hemos localizado.
    this->p1_fila = -1;
    this->p1_col = -1;
    this->p2_fila = -1;
    this->p2_col = -1;
}

// --- Lógica de Inicialización ---
// Escanea el mapa al inicio para encontrar las posiciones (fila, columna)
// donde fueron colocados aleatoriamente los jugadores.
void ControlJuego::encontrarPosicionInicialJugadores() {
    if (mapa == nullptr) return;

    for (int f = 1; f <= mapa->dimension_Fila(); f++) {
        for (int c = 1; c <= mapa->dimension_columna(); c++) {
            int val = mapa->Elemento(f, c);
            if (val == 2) { // Jugador 1
                p1_fila = f;
                p1_col = c;
            } else if (val == 3) { // Jugador 2
                p2_fila = f;
                p2_col = c;
            }
        }
    }
}

// --- Lógica Principal del Movimiento (Método Privado) ---
// Valida si un movimiento a una nueva casilla es posible y actualiza el mapa.
void ControlJuego::intentarMover(int jugador, int nF, int nC) {
    // Obtiene el contenido de la casilla de destino.
    int destino = mapa->Elemento(nF, nC);

    // Condición de movimiento inválido: Si choca con un muro (1) o con el otro jugador.
    if (destino == 1 || (jugador == 1 && destino == 3) || (jugador == 2 && destino == 2)) {
        return; // No hace nada, el movimiento es inválido.
    }

    // Si el movimiento es válido (a una casilla vacía (0) o con fruta (4)).
    int id_jugador = (jugador == 1) ? 2 : 3;
    int fila_actual = (jugador == 1) ? p1_fila : p2_fila;
    int col_actual = (jugador == 1) ? p1_col : p2_col;

    // --- GUARDAMOS EN LA PILA PARA PODER DESHACER ---
    // Guardamos: ID del jugador, su pos original (fila, col) y qué había en la casilla destino.
    pila_undo->Meter(id_jugador);
    pila_undo->Meter(fila_actual);
    pila_undo->Meter(col_actual);
    pila_undo->Meter(destino);

    // Actualizamos el mapa:
    mapa->poner(fila_actual, col_actual, 0); // La casilla vieja ahora está vacía.
    mapa->poner(nF, nC, id_jugador);         // El jugador está en la nueva casilla.

    // Actualizamos las coordenadas internas que guardamos en la clase:
    if (jugador == 1) {
        p1_fila = nF;
        p1_col = nC;
    } else {
        p2_fila = nF;
        p2_col = nC;
    }

    // Lógica de la fruta:
    if (destino == 4) {
        // Si el jugador se movió a la casilla de la fruta, la "come".
        // Volvemos a generar la fruta en una nueva posición vacía.
        int f_rand, c_rand;
        do {
            f_rand = 2 + rand() % (mapa->dimension_Fila() - 2);
            c_rand = 2 + rand() % (mapa->dimension_columna() - 2);
        } while (mapa->Elemento(f_rand, c_rand) != 0); // Busca hasta encontrar una casilla vacía
        mapa->poner(f_rand, c_rand, 4); // Pone la nueva fruta
    }
}

// --- Lógica para Deshacer Movimiento (Ctrl+Z) ---
void ControlJuego::deshacerMovimiento() {
    // Si la pila está vacía, no hay nada que deshacer.
    if (pila_undo->Vacia()) return;

    // Sacamos los datos de la pila en orden inverso a como los metimos.
    int valor_viejo_destino;
    int col_original;
    int fila_original;
    int id_jugador;
    pila_undo->Sacar(valor_viejo_destino);
    pila_undo->Sacar(col_original);
    pila_undo->Sacar(fila_original);
    pila_undo->Sacar(id_jugador);

    // Obtenemos la posición actual del jugador que se movió.
    int fila_actual, col_actual;
    if (id_jugador == 2) { // Era el Jugador 1
        fila_actual = p1_fila;
        col_actual = p1_col;
        // Restauramos sus coordenadas internas a las originales.
        p1_fila = fila_original;
        p1_col = col_original;
    } else { // Era el Jugador 2
        fila_actual = p2_fila;
        col_actual = p2_col;
        // Restauramos sus coordenadas internas a las originales.
        p2_fila = fila_original;
        p2_col = col_original;
    }

    // Restauramos el mapa a su estado anterior:
    mapa->poner(fila_original, col_original, id_jugador); // Ponemos al jugador donde estaba.
    mapa->poner(fila_actual, col_actual, valor_viejo_destino); // Restauramos lo que había en la casilla a la que se movió.
}

/*
 AQUÍ VA TU MÉTODO procesarInput QUE YA TIENES
 void ControlJuego::procesarInput(WORD tecla) { ... }
*/
void ControlJuego::procesarInput(WORD tecla) {
    if (mapa == nullptr || cola_de_turnos == nullptr) return;

    // 1. Vemos de quién es el turno SIN SACARLO
    int jugador_con_turno = cola_de_turnos->verProximoTurno();
    if (jugador_con_turno == -1) {
        return; // No hay turnos, no hacemos nada
    }

    bool se_realizo_movimiento = false;

    // 2. Comprobamos si la tecla presionada corresponde al jugador que tiene el turno
    if (jugador_con_turno == 1) { // Le toca al Jugador 1
        switch (tecla) {
            case 'W': case 'S': case 'A': case 'D':
                // La tecla es del J1, así que AHORA SÍ sacamos el turno
                int turno_consumido;
                cola_de_turnos->sacar(turno_consumido);
                // Movemos al jugador
				if (tecla == 'W') intentarMover(1, p1_fila - 1, p1_col);
                if (tecla == 'S') intentarMover(1, p1_fila + 1, p1_col);
                if (tecla == 'A') intentarMover(1, p1_fila, p1_col - 1);
                if (tecla == 'D') intentarMover(1, p1_fila, p1_col + 1);
                se_realizo_movimiento = true;
                break;
        }
    } else if (jugador_con_turno == 2) { // Le toca al Jugador 2
        switch (tecla) {
            case VK_UP: case VK_DOWN: case VK_LEFT: case VK_RIGHT:
                // La tecla es del J2, sacamos el turno
                int turno_consumido;
                cola_de_turnos->sacar(turno_consumido);
                // Movemos al jugador
                if (tecla == VK_UP) intentarMover(2, p2_fila - 1, p2_col);
                if (tecla == VK_DOWN) intentarMover(2, p2_fila + 1, p2_col);
                if (tecla == VK_LEFT) intentarMover(2, p2_fila, p2_col - 1);
                if (tecla == VK_RIGHT) intentarMover(2, p2_fila, p2_col + 1);
                se_realizo_movimiento = true;
                break;
        }
    }

    // 3. Si se movió un jugador, ponemos su ID de vuelta en la cola correspondiente
    // para que pueda tener turnos en el futuro.
    if(se_realizo_movimiento) {
        // La prioridad 0 es para J1, la 1 para J2
        cola_de_turnos->poner(jugador_con_turno, jugador_con_turno - 1);
    }
}
